# Smart Sprint Project - Step by Step Implementation Guide

This document provides a comprehensive step-by-step guide to create the Smart Sprint project from scratch, based on the development journey captured in our conversation.

## Project Overview

Smart Sprint is a MERN (MongoDB, Express, React, Node.js) stack application for team management with role-based access control. It includes:
- Secure password authentication
- Role-based access (Admin, Project Manager, Developer)
- User profile management with profile pictures
- Project management with task assignment
- Kanban board for task visualization

## Step 1: Project Setup

1. Create a new project directory and initialize it:
   ```
   mkdir smart-sprint
   cd smart-sprint
   npm init -y
   ```

2. Create backend and frontend directories:
   ```
   mkdir backend frontend
   ```

3. Setup the backend:
   ```
   cd backend
   npm init -y
   npm install express mongoose dotenv cors jsonwebtoken bcryptjs multer
   ```

4. Setup the frontend:
   ```
   cd ../frontend
   npx create-react-app .
   npm install axios react-router-dom @mui/material @mui/icons-material @emotion/react @emotion/styled react-bootstrap bootstrap @hello-pangea/dnd
   ```

5. Create a root package.json for running both servers:
   ```json
   {
     "name": "smart-sprint",
     "version": "1.0.0",
     "description": "Team Management Application",
     "main": "index.js",
     "scripts": {
       "start": "concurrently \"npm run server\" \"npm run client\"",
       "install-all": "npm install && cd backend && npm install && cd ../frontend && npm install",
       "server": "cd backend && npm run dev",
       "client": "cd frontend && npm start"
     },
     "dependencies": {
       "concurrently": "^8.2.0"
     }
   }
   ```

## Step 2: Backend Development

1. Create server.js in the backend directory:
   ```javascript
   const express = require('express');
   const mongoose = require('mongoose');
   const cors = require('cors');
   const dotenv = require('dotenv');
   const path = require('path');

   // Load environment variables
   dotenv.config();

   // Create Express app
   const app = express();

   // Middleware
   app.use(cors());
   app.use(express.json());

   // Serve static files from the uploads directory
   app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

   // Import routes
   const authRoutes = require('./routes/auth');
   const userRoutes = require('./routes/users');
   const projectRoutes = require('./routes/projects');
   const taskRoutes = require('./routes/tasks');

   // Use routes
   app.use('/api/auth', authRoutes);
   app.use('/api/users', userRoutes);
   app.use('/api/projects', projectRoutes);
   app.use('/api/tasks', taskRoutes);

   // Error handling middleware
   app.use((err, req, res, next) => {
       console.error('Server error:', err.stack);
       res.status(500).json({ error: 'Internal server error' });
   });

   // Connect to MongoDB and start server
   mongoose.connect(process.env.MONGODB_URI)
       .then(() => {
           console.log('Connected to MongoDB');
           const PORT = process.env.PORT || 5000;
           app.listen(PORT, () => {
               console.log(`Server is running on port ${PORT}`);
           });
       })
       .catch((error) => {
           console.error('MongoDB connection error:', error);
       });
   ```

2. Create .env file:
   ```
   MONGODB_URI=your_mongodb_connection_string
   JWT_SECRET=your_jwt_secret
   PORT=5000
   ```

3. Create User model (models/User.js):
   ```javascript
   const mongoose = require('mongoose');
   const bcrypt = require('bcryptjs');

   const userSchema = new mongoose.Schema({
       username: {
           type: String,
           required: true,
           unique: true,
           trim: true
       },
       password: {
           type: String,
           required: true
       },
       isFirstLogin: {
           type: Boolean,
           default: true
       },
       role: {
           type: String,
           enum: ['Admin', 'Project Manager', 'Developer'],
           required: true
       },
       team: {
           type: String,
           enum: ['Design', 'Database', 'Backend', 'Frontend', 'DevOps', 'Tester/Security', 'None', 'admin', 'pm'],
           required: true,
           default: 'None'
       },
       level: {
           type: String,
           enum: ['Lead', 'Senior', 'Dev', 'Junior', 'admin', 'pm'],
           required: true,
           default: 'Dev'
       },
       profilePicture: {
           type: String,
           default: ''
       },
       fullName: {
           type: String,
           default: ''
       },
       email: {
           type: String,
           default: ''
       },
       createdAt: {
           type: Date,
           default: Date.now
       }
   });

   // Hash password before saving
   userSchema.pre('save', async function(next) {
       if (!this.isModified('password')) return next();
       
       try {
           const salt = await bcrypt.genSalt(10);
           this.password = await bcrypt.hash(this.password, salt);
           next();
       } catch (error) {
           next(error);
       }
   });

   // Method to compare password
   userSchema.methods.comparePassword = async function(candidatePassword) {
       try {
           return await bcrypt.compare(candidatePassword, this.password);
       } catch (error) {
           throw error;
       }
   };

   module.exports = mongoose.model('User', userSchema);
   ```

4. Create Project and Task models (similar structure)

5. Create authentication middleware (middleware/auth.js):
   ```javascript
   const jwt = require('jsonwebtoken');

   const auth = async (req, res, next) => {
       try {
           let token;
           
           if (req.header('Authorization')) {
               token = req.header('Authorization').replace('Bearer ', '');
           } else if (req.header('x-auth-token')) {
               token = req.header('x-auth-token');
           }
           
           if (!token) {
               return res.status(401).json({ error: 'No token provided, authorization denied' });
           }

           try {
               const decoded = jwt.verify(token, process.env.JWT_SECRET);
               req.user = { ...decoded, id: decoded._id };
               next();
           } catch (err) {
               console.error('Token verification error:', err.message);
               return res.status(401).json({ error: 'Token is not valid' });
           }
       } catch (error) {
           console.error('Auth middleware error:', error.message);
           res.status(500).json({ error: 'Server error in authentication' });
       }
   };

   module.exports = auth;
   ```

6. Create authentication routes (routes/auth.js):
   ```javascript
   const express = require('express');
   const router = express.Router();
   const User = require('../models/User');
   const jwt = require('jsonwebtoken');
   const mongoose = require('mongoose');
   const auth = require('../middleware/auth');

   // Login route
   router.post('/login', async (req, res) => {
       try {
           const { username, password } = req.body;
           
           if (!username || !password) {
               return res.status(400).json({ error: 'Username and password are required' });
           }

           const user = await User.findOne({ username });
           
           if (!user) {
               return res.status(401).json({ error: 'Invalid username or password' });
           }

           // Check password
           const isMatch = await user.comparePassword(password);
           if (!isMatch) {
               return res.status(401).json({ error: 'Invalid username or password' });
           }

           const token = jwt.sign(
               { _id: user._id.toString(), role: user.role },
               process.env.JWT_SECRET,
               { expiresIn: '24h' }
           );

           res.json({ 
               user: {
                   _id: user._id,
                   username: user.username,
                   role: user.role,
                   team: user.team,
                   level: user.level,
                   isFirstLogin: user.isFirstLogin,
                   profilePicture: user.profilePicture,
                   fullName: user.fullName,
                   email: user.email,
                   createdAt: user.createdAt
               }, 
               token 
           });
       } catch (error) {
           res.status(500).json({ error: error.message });
       }
   });

   // Change password route
   router.post('/change-password', auth, async (req, res) => {
       try {
           const { currentPassword, newPassword } = req.body;
           
           if (!currentPassword || !newPassword) {
               return res.status(400).json({ error: 'Current password and new password are required' });
           }

           const user = await User.findById(req.user._id);
           
           if (!user) {
               return res.status(404).json({ error: 'User not found' });
           }

           const isMatch = await user.comparePassword(currentPassword);
           if (!isMatch) {
               return res.status(401).json({ error: 'Current password is incorrect' });
           }

           user.password = newPassword;
           user.isFirstLogin = false;
           await user.save();

           res.status(200).json({ message: 'Password updated successfully' });
       } catch (error) {
           res.status(500).json({ error: error.message });
       }
   });

   // First-time password setup route
   router.post('/first-password', auth, async (req, res) => {
       try {
           const { newPassword } = req.body;
           
           if (!newPassword) {
               return res.status(400).json({ error: 'New password is required' });
           }

           const user = await User.findById(req.user._id);
           
           if (!user) {
               return res.status(404).json({ error: 'User not found' });
           }

           if (!user.isFirstLogin) {
               return res.status(400).json({ error: 'This is not your first login. Use the change password route instead.' });
           }

           user.password = newPassword;
           user.isFirstLogin = false;
           await user.save();

           res.status(200).json({ message: 'Password set successfully' });
       } catch (error) {
           res.status(500).json({ error: error.message });
       }
   });

   // Create other routes for projects, tasks, etc.

   module.exports = router;
   ```

7. Create user routes (routes/users.js) with profile picture upload functionality

8. Create a script for database initialization (resetDatabase.js):
   ```javascript
   require('dotenv').config();
   const mongoose = require('mongoose');
   const User = require('./models/User');

   mongoose.connect(process.env.MONGODB_URI)
       .then(async () => {
           console.log('Connected to MongoDB');
           
           try {
               const adminUser = await User.findOne({ username: 'admin' });
               
               if (adminUser) {
                   console.log('Admin user found, resetting password...');
                   adminUser.password = 'admin';
                   adminUser.isFirstLogin = false;
                   await adminUser.save();
                   console.log('Admin password reset to "admin"');
                   
                   const deleteResult = await User.deleteMany({ _id: { $ne: adminUser._id } });
                   console.log(`Deleted ${deleteResult.deletedCount} other users`);
               } else {
                   console.log('Admin user not found, creating new admin user...');
                   const admin = new User({
                       username: 'admin',
                       password: 'admin',
                       role: 'Admin',
                       team: 'admin',
                       level: 'admin',
                       isFirstLogin: false
                   });
                   
                   await admin.save();
                   console.log('New admin user created with password "admin"');
               }
               
               console.log('Database reset completed successfully');
           } catch (error) {
               console.error('Error resetting database:', error);
           } finally {
               await mongoose.connection.close();
               console.log('Database connection closed');
               process.exit(0);
           }
       })
       .catch(error => {
           console.error('MongoDB connection error:', error);
           process.exit(1);
       });
   ```

## Step 3: Frontend Development

1. Create a configuration file (src/config.js):
   ```javascript
   // API configuration
   const API_CONFIG = {
     BASE_URL: 'http://localhost:5000',
     AUTH_ENDPOINT: '/api/auth',
     USERS_ENDPOINT: '/api/users',
     PROJECTS_ENDPOINT: '/api/projects',
     TASKS_ENDPOINT: '/api/tasks',
   };

   export default API_CONFIG;
   ```

2. Create Login component (src/components/Login.js):
   ```javascript
   import React, { useState } from 'react';
   import { useNavigate } from 'react-router-dom';
   import axios from 'axios';
   import {
       Box, Button, TextField, Typography, Alert,
   } from '@mui/material';
   import { Card, Row, Col, Image, Container } from 'react-bootstrap';
   import API_CONFIG from '../config';

   const Login = () => {
       const [username, setUsername] = useState('');
       const [password, setPassword] = useState('');
       const [error, setError] = useState('');
       const [loading, setLoading] = useState(false);
       const navigate = useNavigate();

       const handleSubmit = async (e) => {
           e.preventDefault();
           setError('');
           setLoading(true);
           
           if (!username || !password) {
               setError('Please enter both username and password');
               setLoading(false);
               return;
           }
           
           try {
               const response = await axios.post(`${API_CONFIG.AUTH_ENDPOINT}/login`, { 
                   username,
                   password
               });
               
               localStorage.setItem('token', response.data.token);
               localStorage.setItem('user', JSON.stringify(response.data.user));
               
               axios.defaults.headers.common['Authorization'] = `Bearer ${response.data.token}`;
               
               if (response.data.user.isFirstLogin) {
                   navigate('/first-login');
               } else {
                   navigate('/dashboard');
               }
           } catch (err) {
               console.error('Login error:', err);
               setError(err.response?.data?.error || 'Login failed. Please check your credentials.');
               setLoading(false);
           }
       };

       return (
           <Container>
               <Row className="justify-content-center align-items-center min-vh-100">
                   <Col md={8} lg={6}>
                       <Card className="shadow-lg border-0 rounded-lg">
                           <Card.Body className="p-5">
                               <Row className="align-items-center">
                                   <Col md={6} className="border-end text-center">
                                       <Image 
                                           src="/logo.png" 
                                           alt="Smart Sprint Logo" 
                                           className="img-fluid mb-4 p-4" 
                                           style={{ maxWidth: '200px' }}
                                       />
                                       <Typography variant="h4" className="text-primary">
                                           Smart Sprint
                                       </Typography>
                                       <Typography variant="subtitle1" className="text-muted">
                                           Project Management Simplified
                                       </Typography>
                                   </Col>
                                   <Col md={6}>
                                       <Box component="form" onSubmit={handleSubmit} noValidate className="p-3">
                                           <Typography variant="h5" gutterBottom className="mb-4 text-center">
                                               Login
                                           </Typography>
                                           
                                           {error && <Alert severity="error" className="mb-3">{error}</Alert>}
                                           
                                           <TextField
                                               margin="normal"
                                               required
                                               fullWidth
                                               id="username"
                                               label="Username"
                                               name="username"
                                               autoComplete="username"
                                               autoFocus
                                               value={username}
                                               onChange={(e) => setUsername(e.target.value)}
                                               disabled={loading}
                                           />
                                           <TextField
                                               margin="normal"
                                               required
                                               fullWidth
                                               name="password"
                                               label="Password"
                                               type="password"
                                               id="password"
                                               autoComplete="current-password"
                                               value={password}
                                               onChange={(e) => setPassword(e.target.value)}
                                               disabled={loading}
                                           />
                                           <Button
                                               type="submit"
                                               fullWidth
                                               variant="contained"
                                               sx={{ mt: 3, mb: 2 }}
                                               disabled={loading}
                                           >
                                               {loading ? 'Logging in...' : 'Login'}
                                           </Button>
                                           <Typography variant="body2" color="textSecondary" align="center">
                                               Default admin credentials: username 'admin', password 'admin'
                                           </Typography>
                                       </Box>
                                   </Col>
                               </Row>
                           </Card.Body>
                       </Card>
                   </Col>
               </Row>
           </Container>
       );
   };

   export default Login;
   ```

3. Create First Login component (src/components/FirstLogin.js):
   ```javascript
   import React, { useState } from 'react';
   import { useNavigate } from 'react-router-dom';
   import axios from 'axios';
   import {
       Box, Typography, Button, TextField, Paper, Card, Alert
   } from '@mui/material';
   import { Container } from 'react-bootstrap';
   import { LockOutlined } from '@mui/icons-material';
   import API_CONFIG from '../config';

   const FirstLogin = () => {
       const [password, setPassword] = useState('');
       const [confirmPassword, setConfirmPassword] = useState('');
       const [error, setError] = useState('');
       const [loading, setLoading] = useState(false);
       const navigate = useNavigate();
       
       const handleSubmit = async (e) => {
           e.preventDefault();
           setError('');
           
           if (!password || !confirmPassword) {
               setError('Please enter both fields');
               return;
           }
           
           if (password !== confirmPassword) {
               setError('Passwords do not match');
               return;
           }
           
           if (password.length < 4) {
               setError('Password should be at least 4 characters long');
               return;
           }
           
           setLoading(true);
           
           try {
               await axios.post(`${API_CONFIG.AUTH_ENDPOINT}/first-password`, {
                   newPassword: password
               });
               
               // Update the isFirstLogin property in local storage
               const userStr = localStorage.getItem('user');
               if (userStr) {
                   const user = JSON.parse(userStr);
                   user.isFirstLogin = false;
                   localStorage.setItem('user', JSON.stringify(user));
               }
               
               navigate('/dashboard');
           } catch (err) {
               console.error('Error setting new password:', err);
               setError(err.response?.data?.error || 'Failed to set new password. Please try again.');
           } finally {
               setLoading(false);
           }
       };
       
       return (
           <Container>
               <Box sx={{ marginTop: 8, display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
                   <Card sx={{ padding: 4, borderRadius: 2, boxShadow: 3, width: '100%', maxWidth: '500px' }}>
                       <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
                           <LockOutlined sx={{ fontSize: 40, color: 'primary.main', mb: 2 }} />
                           <Typography component="h1" variant="h5" gutterBottom>
                               Set New Password
                           </Typography>
                           <Typography variant="body2" color="textSecondary" align="center" sx={{ mb: 3 }}>
                               This is your first login. Please set a new password to continue.
                           </Typography>
                           
                           {error && <Alert severity="error" sx={{ width: '100%', mb: 2 }}>{error}</Alert>}
                           
                           <Box component="form" onSubmit={handleSubmit} noValidate sx={{ width: '100%' }}>
                               <TextField
                                   margin="normal"
                                   required
                                   fullWidth
                                   name="password"
                                   label="New Password"
                                   type="password"
                                   id="password"
                                   autoFocus
                                   value={password}
                                   onChange={(e) => setPassword(e.target.value)}
                               />
                               <TextField
                                   margin="normal"
                                   required
                                   fullWidth
                                   name="confirmPassword"
                                   label="Confirm Password"
                                   type="password"
                                   id="confirm-password"
                                   value={confirmPassword}
                                   onChange={(e) => setConfirmPassword(e.target.value)}
                               />
                               <Button
                                   type="submit"
                                   fullWidth
                                   variant="contained"
                                   sx={{ mt: 3, mb: 2 }}
                                   disabled={loading}
                               >
                                   {loading ? 'Setting Password...' : 'Set Password'}
                               </Button>
                           </Box>
                       </Box>
                   </Card>
               </Box>
           </Container>
       );
   };

   export default FirstLogin;
   ```

4. Create User Profile component (src/components/UserProfile.js)

5. Create Dashboard component (src/components/Dashboard.js)

6. Create Navigation component (src/components/Navigation.js)

7. Create UserList component for user management (src/components/UserList.js)

8. Create KanbanBoard component for task management (src/components/KanbanBoard.js)

9. Create App.js with routing:
   ```javascript
   import React, { useEffect } from 'react';
   import { BrowserRouter as Router, Routes, Route, Navigate, useNavigate } from 'react-router-dom';
   import { ThemeProvider, createTheme } from '@mui/material/styles';
   import CssBaseline from '@mui/material/CssBaseline';
   import Login from './components/Login';
   import Dashboard from './components/Dashboard';
   import UserList from './components/UserList';
   import ProjectList from './components/ProjectList';
   import KanbanBoard from './components/KanbanBoard';
   import Navigation from './components/Navigation';
   import FirstLogin from './components/FirstLogin';
   import UserProfile from './components/UserProfile';
   import Box from '@mui/material/Box';
   import 'bootstrap/dist/css/bootstrap.min.css';
   import './styles.css';

   // Create theme
   const theme = createTheme({
     palette: {
       primary: {
         main: '#3f51b5',
       },
       secondary: {
         main: '#f50057',
       },
     },
     // Additional theme settings...
   });

   // Component to check if user needs to change password
   const FirstLoginCheck = ({ children }) => {
       const navigate = useNavigate();
       
       useEffect(() => {
           const userStr = localStorage.getItem('user');
           if (userStr) {
               const user = JSON.parse(userStr);
               if (user.isFirstLogin) {
                   navigate('/first-login');
               }
           }
       }, [navigate]);
       
       return <>{children}</>;
   };

   const PrivateRoute = ({ children }) => {
       const token = localStorage.getItem('token');
       return token ? (
           <>
               <Navigation />
               <FirstLoginCheck>
                   <Box sx={{ mt: 2 }}>{children}</Box>
               </FirstLoginCheck>
           </>
       ) : (
           <Navigate to="/login" />
       );
   };

   function App() {
       return (
           <ThemeProvider theme={theme}>
               <CssBaseline />
               <Router>
                   <Routes>
                       <Route path="/login" element={<Login />} />
                       <Route
                           path="/first-login"
                           element={
                               <FirstLoginRoute>
                                   <FirstLogin />
                               </FirstLoginRoute>
                           }
                       />
                       <Route
                           path="/dashboard"
                           element={
                               <PrivateRoute>
                                   <Dashboard />
                               </PrivateRoute>
                           }
                       />
                       <Route
                           path="/users"
                           element={
                               <PrivateRoute>
                                   <UserList />
                               </PrivateRoute>
                           }
                       />
                       <Route
                           path="/projects"
                           element={
                               <PrivateRoute>
                                   <ProjectList />
                               </PrivateRoute>
                           }
                       />
                       <Route
                           path="/profile"
                           element={
                               <PrivateRoute>
                                   <UserProfile />
                               </PrivateRoute>
                           }
                       />
                       <Route
                           path="/projects/:id/kanban"
                           element={
                               <PrivateRoute>
                                   <KanbanBoard />
                               </PrivateRoute>
                           }
                       />
                       <Route path="/" element={<Navigate to="/login" />} />
                   </Routes>
               </Router>
           </ThemeProvider>
       );
   }

   export default App;
   ```

## Step 4: Testing and Deployment

1. Test the application locally:
   ```
   npm run install-all
   npm start
   ```

2. Access the application at http://localhost:3000
   - Login with admin credentials: username "admin", password "admin"
   - Create users and test role-based access
   - Verify first-time login password change
   - Test user profile management and password changes

3. Deploy to a hosting service (e.g., Heroku, Vercel, etc.)

## Final Notes

- Always ensure MongoDB is properly configured and accessible
- Keep the JWT_SECRET secure and use a strong secret in production
- Consider adding additional security measures for a production deployment
- Regularly backup your database
- Implement proper error handling and validation throughout the application

By following these steps, you should be able to recreate the Smart Sprint project from scratch.

---
Original Prompts:

1. "Summary of the conversation so far:" (Initial conversation about GitHub repository management, running the application with a single command, details about package.json and README.md updates, etc.)

2. "Close all the ports, update the git repo" (Request to close all running ports and update the git repository)

3. "Implement Password authentication to all the profiles." (Request to implement password authentication with specific requirements)

4. "write all the promts of this conversations sequence wise in a txt file in github create a new branch for auth, and upload all the code there." (Request to document the prompts and create a new branch for authentication code)

5. "There is an error in the authenticataion, find it and fix it. Delete all the existing users from the database except for admin. Update admin password in database as well" (Request to fix an authentication error and reset the database)

6. "kill all the ports and re run the program" (Request to restart the application)

7. "update prompt file to create a step by step replica of this app. update readme as well create a pull request for all banches to merge in main" (Request to update documentation and create a pull request) 