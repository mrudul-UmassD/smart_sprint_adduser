# Smart Sprint Project - Step by Step Implementation Guide

This document provides a comprehensive step-by-step guide to create the Smart Sprint project from scratch, based on the development journey captured in our conversation.

## Project Overview

Smart Sprint is a MERN (MongoDB, Express, React, Node.js) stack application for team management with role-based access control. It includes:
- Secure password authentication
- Role-based access (Admin, Project Manager, Developer)
- User profile management with profile pictures
- Project management with task assignment
- Kanban board for task visualization
- Drag and drop interfaces for user and task management
- Team-based organization with visual management tools

## Step 1: Project Setup

1. Create a new project directory and initialize it:
   ```
   mkdir smart-sprint
   cd smart-sprint
   npm init -y
   ```

2. Create backend and frontend directories:
   ```
   mkdir backend frontend
   ```

3. Setup the backend:
   ```
   cd backend
   npm init -y
   npm install express mongoose dotenv cors jsonwebtoken bcryptjs multer
   ```

4. Setup the frontend:
   ```
   cd ../frontend
   npx create-react-app .
   npm install axios react-router-dom @mui/material @mui/icons-material @emotion/react @emotion/styled react-bootstrap bootstrap @hello-pangea/dnd
   ```

5. Create a root package.json for running both servers:
   ```json
   {
     "name": "smart-sprint",
     "version": "1.0.0",
     "description": "Team Management Application",
     "main": "index.js",
     "scripts": {
       "start": "concurrently \"npm run server\" \"npm run client\"",
       "install-all": "npm install && cd backend && npm install && cd ../frontend && npm install",
       "server": "cd backend && npm run dev",
       "client": "cd frontend && npm start"
     },
     "dependencies": {
       "concurrently": "^8.2.0"
     }
   }
   ```

## Step 2: Backend Development

1. Create server.js in the backend directory:
   ```javascript
   const express = require('express');
   const mongoose = require('mongoose');
   const cors = require('cors');
   const dotenv = require('dotenv');
   const path = require('path');

   // Load environment variables
   dotenv.config();

   // Create Express app
   const app = express();

   // Middleware
   app.use(cors());
   app.use(express.json());

   // Serve static files from the uploads directory
   app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

   // Import routes
   const authRoutes = require('./routes/auth');
   const userRoutes = require('./routes/users');
   const projectRoutes = require('./routes/projects');
   const taskRoutes = require('./routes/tasks');

   // Use routes
   app.use('/api/auth', authRoutes);
   app.use('/api/users', userRoutes);
   app.use('/api/projects', projectRoutes);
   app.use('/api/tasks', taskRoutes);

   // Error handling middleware
   app.use((err, req, res, next) => {
       console.error('Server error:', err.stack);
       res.status(500).json({ error: 'Internal server error' });
   });

   // Connect to MongoDB and start server
   mongoose.connect(process.env.MONGODB_URI)
       .then(() => {
           console.log('Connected to MongoDB');
           const PORT = process.env.PORT || 5001;
           app.listen(PORT, () => {
               console.log(`Server is running on port ${PORT}`);
           });
       })
       .catch((error) => {
           console.error('MongoDB connection error:', error);
       });
   ```

2. Create .env file:
   ```
   MONGODB_URI=your_mongodb_connection_string
   JWT_SECRET=your_jwt_secret
   PORT=5001
   ```

3. Create User model (models/User.js):
   ```javascript
   const mongoose = require('mongoose');
   const bcrypt = require('bcryptjs');

   const userSchema = new mongoose.Schema({
       username: {
           type: String,
           required: true,
           unique: true,
           trim: true
       },
       password: {
           type: String,
           required: true
       },
       isFirstLogin: {
           type: Boolean,
           default: true
       },
       role: {
           type: String,
           enum: ['Admin', 'Project Manager', 'Developer'],
           required: true
       },
       team: {
           type: String,
           enum: ['Design', 'Database', 'Backend', 'Frontend', 'DevOps', 'Tester/Security', 'None', 'admin', 'pm'],
           required: true,
           default: 'None'
       },
       level: {
           type: String,
           enum: ['Lead', 'Senior', 'Dev', 'Junior', 'admin', 'pm'],
           required: true,
           default: 'Dev'
       },
       profilePicture: {
           type: String,
           default: ''
       },
       fullName: {
           type: String,
           default: ''
       },
       email: {
           type: String,
           default: ''
       },
       createdAt: {
           type: Date,
           default: Date.now
       }
   });

   // Hash password before saving
   userSchema.pre('save', async function(next) {
       if (!this.isModified('password')) return next();
       
       try {
           const salt = await bcrypt.genSalt(10);
           this.password = await bcrypt.hash(this.password, salt);
           next();
       } catch (error) {
           next(error);
       }
   });

   // Method to compare password
   userSchema.methods.comparePassword = async function(candidatePassword) {
       try {
           return await bcrypt.compare(candidatePassword, this.password);
       } catch (error) {
           throw error;
       }
   };

   module.exports = mongoose.model('User', userSchema);
   ```

4. Create Project and Task models (similar structure)

5. Create authentication middleware (middleware/auth.js):
   ```javascript
   const jwt = require('jsonwebtoken');

   const auth = async (req, res, next) => {
       try {
           let token;
           
           if (req.header('Authorization')) {
               token = req.header('Authorization').replace('Bearer ', '');
           } else if (req.header('x-auth-token')) {
               token = req.header('x-auth-token');
           }
           
           if (!token) {
               return res.status(401).json({ error: 'No token provided, authorization denied' });
           }

           try {
               const decoded = jwt.verify(token, process.env.JWT_SECRET);
               req.user = { ...decoded, id: decoded._id };
               next();
           } catch (err) {
               console.error('Token verification error:', err.message);
               return res.status(401).json({ error: 'Token is not valid' });
           }
       } catch (error) {
           console.error('Auth middleware error:', error.message);
           res.status(500).json({ error: 'Server error in authentication' });
       }
   };

   module.exports = auth;
   ```

## Step 3: Task Management API Endpoints

Create routes for task management with status updates (routes/tasks.js):

```javascript
// Add this route to the tasks.js file for updating task status
// This is used by the Kanban board drag and drop functionality

// Update task status only
router.patch('/:taskId/status', auth, async (req, res) => {
    try {
        const { taskId } = req.params;
        const { status } = req.body;
        
        if (!status) {
            return res.status(400).json({ error: 'Status is required' });
        }
        
        // Find the task
        const task = await Task.findById(taskId);
        if (!task) {
            return res.status(404).json({ error: 'Task not found' });
        }
        
        // Check if project exists
        const project = await Project.findById(task.project);
        if (!project) {
            return res.status(404).json({ error: 'Project not found' });
        }
        
        // Check permissions
        if (req.user.role === 'Developer') {
            // Must be the assignee
            if (task.assignee && task.assignee.toString() !== req.user._id.toString()) {
                return res.status(403).json({ error: 'You can only update tasks assigned to you' });
            }
        } else if (req.user.role === 'Project Manager') {
            // Project Manager must be a PM for this project
            const isPMMember = project.members.some(member => 
                member.userId.toString() === req.user._id.toString() && 
                member.role === 'Project Manager'
            );
            
            if (!isPMMember) {
                return res.status(403).json({ error: 'You must be a Project Manager of this project to update tasks' });
            }
        } else if (req.user.role !== 'Admin') {
            return res.status(403).json({ error: 'Access denied' });
        }
        
        // Update status
        task.status = status;
        task.updatedAt = Date.now();
        await task.save();
        
        // Populate references
        const populatedTask = await Task.findById(task._id)
            .populate('assignee', 'username team level role')
            .populate('assignedBy', 'username');
            
        res.json(populatedTask);
    } catch (error) {
        res.status(400).json({ error: error.message });
    }
});
```

## Step 4: Frontend Development - Kanban Board with Drag & Drop

Create a KanbanBoard component with drag and drop functionality:

```jsx
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import { 
  Container, 
  Row, 
  Col, 
  Card, 
  Badge, 
  Button, 
  Modal,
  Form, 
  Alert,
  Spinner
} from 'react-bootstrap';
import { DragDropContext, Droppable, Draggable } from '@hello-pangea/dnd';
import API_CONFIG from '../config';

const KanbanBoard = () => {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);
  const [tasks, setTasks] = useState([]);
  const [users, setUsers] = useState([]);
  const [projects, setProjects] = useState([]);
  const [selectedProject, setSelectedProject] = useState('');
  const [showTaskDialog, setShowTaskDialog] = useState(false);
  const [selectedTask, setSelectedTask] = useState(null);
  const [error, setError] = useState('');
  const [currentUser, setCurrentUser] = useState(null);
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    assignee: '',
    priority: 'Medium',
    status: 'Todo',
    dueDate: new Date().toISOString().split('T')[0]
  });

  // Fetch current user info
  useEffect(() => {
    const userStr = localStorage.getItem('user');
    if (userStr) {
      setCurrentUser(JSON.parse(userStr));
    }
  }, []);

  // Fetch projects, tasks, and users on component mount
  useEffect(() => {
    const token = localStorage.getItem('token');
    if (!token) {
      navigate('/login');
      return;
    }

    const fetchProjects = async () => {
      // ... implementation
    };

    fetchProjects();
    fetchUsers();
  }, [navigate]);

  // ... other methods

  // Key method for drag and drop
  const handleDragEnd = async (result) => {
    if (!result.destination) return;
    
    const { draggableId, destination } = result;
    const newStatus = destination.droppableId;
    
    await handleStatusChange(draggableId, newStatus);
  };

  const handleStatusChange = async (taskId, newStatus) => {
    try {
      // For developers, don't allow direct move to Completed
      if (currentUser && currentUser.role === 'Developer' && newStatus === 'Completed') {
        newStatus = 'Review';
      }
      
      await axios.patch(`${API_CONFIG.TASKS_ENDPOINT}/${taskId}/status`, { status: newStatus });
      fetchTasks();
    } catch (err) {
      console.error('Error updating task status:', err);
      setError('Failed to update task status. Please try again later.');
      setTimeout(() => setError(''), 3000);
    }
  };

  const getAssigneeTeam = () => {
    if (!formData.assignee) return null;
    const assignedUser = users.find(user => user._id === formData.assignee);
    return assignedUser ? assignedUser.team : null;
  };

  // ... render method with drag and drop implementation
  return (
    <Container fluid>
      {/* ... other UI elements */}
      
      <DragDropContext onDragEnd={handleDragEnd}>
        <Row>
          {getStatusColumns().map(column => (
            <Col key={column.id} md style={{ minWidth: '250px' }}>
              <Card className="mb-4">
                <Card.Header className="text-center bg-light">
                  <h5 className="mb-0">{column.title}</h5>
                </Card.Header>
                <Droppable droppableId={column.id}>
                  {(provided) => (
                    <div
                      ref={provided.innerRef}
                      {...provided.droppableProps}
                      className="p-2"
                      style={{ minHeight: '500px' }}
                    >
                      {tasks
                        .filter(task => task.status === column.id)
                        .map((task, index) => (
                          <Draggable key={task._id} draggableId={task._id} index={index}>
                            {(provided) => (
                              <Card 
                                ref={provided.innerRef}
                                {...provided.draggableProps}
                                {...provided.dragHandleProps}
                                className="mb-2 task-card"
                                onClick={() => handleOpenTaskDialog(task)}
                              >
                                {/* Card content */}
                              </Card>
                            )}
                          </Draggable>
                        ))}
                      {provided.placeholder}
                    </div>
                  )}
                </Droppable>
              </Card>
            </Col>
          ))}
        </Row>
      </DragDropContext>
      
      {/* Task dialog form */}
    </Container>
  );
};

export default KanbanBoard;
```

## Step 5: User Management with Drag & Drop

Create a UserList component with team-based drag and drop organization:

```jsx
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { /* Material UI imports */ } from '@mui/material';
import { Edit as EditIcon, Delete as DeleteIcon } from '@mui/icons-material';
import 'bootstrap/dist/css/bootstrap.min.css';
import { Container, Row, Col, Card, Badge } from 'react-bootstrap';
import { DragDropContext, Droppable, Draggable } from '@hello-pangea/dnd';
import API_CONFIG from '../config';

const UserList = () => {
    const [users, setUsers] = useState([]);
    const [open, setOpen] = useState(false);
    const [selectedUser, setSelectedUser] = useState(null);
    const [errorMessage, setErrorMessage] = useState('');
    const [formData, setFormData] = useState({
        username: '',
        role: '',
        team: 'None',
        level: 'Dev',
    });
    const [groupedUsers, setGroupedUsers] = useState({});
    const [displayMode, setDisplayMode] = useState('list'); // 'list' or 'teams'

    // ... other methods

    // Handle drag end event
    const handleDragEnd = (result) => {
        const { destination, source, draggableId } = result;
        
        // If there's no destination or the item is dropped in the same place
        if (!destination || 
            (destination.droppableId === source.droppableId && 
             destination.index === source.index)) {
            return;
        }
        
        if (displayMode === 'list') {
            // Reordering in the list view
            const newUsers = Array.from(users);
            const [movedUser] = newUsers.splice(source.index, 1);
            newUsers.splice(destination.index, 0, movedUser);
            setUsers(newUsers);
        } else {
            // Moving between teams in team view
            const userId = draggableId;
            const user = users.find(u => u._id === userId);
            const newTeam = destination.droppableId === 'Unassigned' ? 'None' : destination.droppableId;
            
            // Only update if the team has changed
            if (user && user.team !== newTeam) {
                updateUserTeam(userId, newTeam);
            }
        }
    };

    // Update user's team in the database
    const updateUserTeam = async (userId, newTeam) => {
        try {
            const token = localStorage.getItem('token');
            const user = users.find(u => u._id === userId);
            
            await axios.put(
                `${API_CONFIG.BASE_URL}${API_CONFIG.USERS_ENDPOINT}/${userId}`, 
                { ...user, team: newTeam },
                { headers: { Authorization: `Bearer ${token}` } }
            );
            
            // Update local state
            setUsers(users.map(u => 
                u._id === userId ? { ...u, team: newTeam } : u
            ));
        } catch (error) {
            console.error('Error updating user team:', error);
        }
    };

    // ... render methods for different views

    return (
        <Container fluid className="p-4">
            <Card className="shadow-sm mb-4">
                <Card.Body>
                    <Row className="align-items-center mb-3">
                        <Col md={6}>
                            <h2 className="mb-0">User Management</h2>
                        </Col>
                        <Col md={3} className="text-md-end mb-2 mb-md-0">
                            <Button 
                                variant={displayMode === 'list' ? "contained" : "outlined"}
                                className="me-2"
                                onClick={() => setDisplayMode('list')}
                            >
                                List View
                            </Button>
                            <Button 
                                variant={displayMode === 'teams' ? "contained" : "outlined"}
                                onClick={() => setDisplayMode('teams')}
                            >
                                Team View
                            </Button>
                        </Col>
                        <Col md={3} className="text-md-end">
                            <Button 
                                variant="contained" 
                                color="primary" 
                                onClick={() => handleOpen()}
                                className="rounded-pill px-4"
                            >
                                Add User
                            </Button>
                        </Col>
                    </Row>
                    
                    {displayMode === 'list' ? renderListView() : renderTeamCards()}
                </Card.Body>
            </Card>

            {/* User dialog form */}
        </Container>
    );
};

export default UserList;
```

## Step 6: Role-Specific Behaviors

Implement special behaviors for different roles:

1. For the Developer role:
   ```javascript
   // In KanbanBoard.js
   const handleStatusChange = async (taskId, newStatus) => {
     try {
       // For developers, don't allow direct move to Completed
       if (currentUser && currentUser.role === 'Developer' && newStatus === 'Completed') {
         newStatus = 'Review';
       }
       
       await axios.patch(`${API_CONFIG.TASKS_ENDPOINT}/${taskId}/status`, { status: newStatus });
       fetchTasks();
     } catch (err) {
       console.error('Error updating task status:', err);
       setError('Failed to update task status. Please try again later.');
       setTimeout(() => setError(''), 3000);
     }
   };
   ```

2. For Admin/PM role in User form:
   ```javascript
   // In UserList.js
   const handleRoleChange = (e) => {
     const selectedRole = e.target.value;
     
     if (selectedRole === 'Admin' || selectedRole === 'Project Manager') {
       setFormData({
         ...formData,
         role: selectedRole,
         team: selectedRole === 'Admin' ? 'admin' : 'pm',
         level: selectedRole === 'Admin' ? 'admin' : 'pm'
       });
     } else {
       setFormData({
         ...formData,
         role: selectedRole
       });
     }
   };
   ```

## Step 7: Team-Based Task Assignment

Implement automatic team assignment from assignee:

```javascript
const getAssigneeTeam = () => {
  if (!formData.assignee) return null;
  const assignedUser = users.find(user => user._id === formData.assignee);
  return assignedUser ? assignedUser.team : null;
};

const handleSubmit = async () => {
  try {
    // Get the team from the selected assignee
    const team = getAssigneeTeam();
    
    if (!team) {
      setError('Please select a valid assignee');
      setTimeout(() => setError(''), 3000);
      return;
    }
    
    const taskData = {
      ...formData,
      team,
      projectId: selectedProject
    };

    // ... rest of submit logic
  } catch (err) {
    // ... error handling
  }
};
```

## Step 8: Making Changes on GitHub

1. Create a new branch for your changes:
   ```bash
   git checkout -b feature/drag-drop-enhancements
   ```

2. Add and commit your changes:
   ```bash
   git add .
   git commit -m "Implement drag and drop for user management and tasks"
   ```

3. Push the branch to GitHub:
   ```bash
   git push origin feature/drag-drop-enhancements
   ```

4. Create a pull request on GitHub to merge your changes into the main branch

## Conclusion

This implementation guide provides a comprehensive walkthrough of creating the Smart Sprint application from scratch. The project includes advanced features like drag and drop interfaces for task and user management, role-specific behaviors, and team-based organization.

By following these steps, you'll create a modern team management application with a responsive UI and intuitive interactions. The application demonstrates effective use of modern web technologies like React, Material UI, Bootstrap, and drag-and-drop libraries, while maintaining secure authentication and authorization processes.

By following these steps, you should be able to recreate the Smart Sprint project from scratch.

---
Original Prompts:

1. "Summary of the conversation so far:" (Initial conversation about GitHub repository management, running the application with a single command, details about package.json and README.md updates, etc.)

2. "Close all the ports, update the git repo" (Request to close all running ports and update the git repository)

3. "Implement Password authentication to all the profiles." (Request to implement password authentication with specific requirements)

4. "write all the promts of this conversations sequence wise in a txt file in github create a new branch for auth, and upload all the code there." (Request to document the prompts and create a new branch for authentication code)

5. "There is an error in the authenticataion, find it and fix it. Delete all the existing users from the database except for admin. Update admin password in database as well" (Request to fix an authentication error and reset the database)

6. "kill all the ports and re run the program" (Request to restart the application)

7. "update prompt file to create a step by step replica of this app. update readme as well create a pull request for all banches to merge in main" (Request to update documentation and create a pull request)

## Enhanced Features Implementation

### 1. Task Management with Drag and Drop

To implement the Kanban board with drag-and-drop functionality:

1. Install the necessary package:
   ```
   cd frontend
   npm install @hello-pangea/dnd
   ```

2. Update the KanbanBoard component with drag-and-drop functionality:

```javascript
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import { 
  Container, Row, Col, Card, Badge, Button, Modal, Form, Alert, Spinner
} from 'react-bootstrap';
import { DragDropContext, Droppable, Draggable } from '@hello-pangea/dnd';
import API_CONFIG from '../config';

const KanbanBoard = () => {
  // State variables
  const [currentUser, setCurrentUser] = useState(null);
  const [tasks, setTasks] = useState([]);
  // Other state variables...

  // Handle drag end event
  const handleDragEnd = async (result) => {
    if (!result.destination) return;
    
    const { draggableId, destination } = result;
    const newStatus = destination.droppableId;
    
    await handleStatusChange(draggableId, newStatus);
  };

  // Update task status with role-specific behavior
  const handleStatusChange = async (taskId, newStatus) => {
    try {
      // For developers, don't allow direct move to Completed
      if (currentUser && currentUser.role === 'Developer' && newStatus === 'Completed') {
        newStatus = 'Review';
      }
      
      await axios.patch(`${API_CONFIG.TASKS_ENDPOINT}/${taskId}/status`, { status: newStatus });
      fetchTasks();
    } catch (err) {
      console.error('Error updating task status:', err);
      setError('Failed to update task status. Please try again later.');
      setTimeout(() => setError(''), 3000);
    }
  };

  // Auto-assign team based on assignee
  const getAssigneeTeam = () => {
    if (!formData.assignee) return null;
    const assignedUser = users.find(user => user._id === formData.assignee);
    return assignedUser ? assignedUser.team : null;
  };

  // Submit task with team from assignee
  const handleSubmit = async () => {
    try {
      // Get the team from the selected assignee
      const team = getAssigneeTeam();
      
      if (!team) {
        setError('Please select a valid assignee');
        setTimeout(() => setError(''), 3000);
        return;
      }
      
      const taskData = {
        ...formData,
        team,
        projectId: selectedProject
      };

      // Rest of submission logic...
    } catch (err) {
      // Error handling...
    }
  };

  // Render Kanban board with drag-and-drop
  return (
    <Container fluid>
      {/* Project selection and other UI elements */}
      
      <DragDropContext onDragEnd={handleDragEnd}>
        <Row>
          {getStatusColumns().map(column => (
            <Col key={column.id} md style={{ minWidth: '250px' }}>
              <Card className="mb-4">
                <Card.Header className="text-center bg-light">
                  <h5 className="mb-0">{column.title}</h5>
                </Card.Header>
                <Droppable droppableId={column.id}>
                  {(provided) => (
                    <div
                      ref={provided.innerRef}
                      {...provided.droppableProps}
                      className="p-2"
                      style={{ minHeight: '500px' }}
                    >
                      {tasks
                        .filter(task => task.status === column.id)
                        .map((task, index) => (
                          <Draggable key={task._id} draggableId={task._id} index={index}>
                            {(provided) => (
                              <Card 
                                ref={provided.innerRef}
                                {...provided.draggableProps}
                                {...provided.dragHandleProps}
                                className="mb-2 task-card"
                              >
                                {/* Task card content */}
                              </Card>
                            )}
                          </Draggable>
                        ))}
                      {provided.placeholder}
                    </div>
                  )}
                </Droppable>
              </Card>
            </Col>
          ))}
        </Row>
      </DragDropContext>
      
      {/* Task dialog */}
    </Container>
  );
};

export default KanbanBoard;
```

3. Add a specific endpoint in the backend to handle status updates:

```javascript
// In backend/routes/tasks.js
// Update task status only
router.patch('/:taskId/status', auth, async (req, res) => {
    try {
        const { taskId } = req.params;
        const { status } = req.body;
        
        if (!status) {
            return res.status(400).json({ error: 'Status is required' });
        }
        
        // Find the task
        const task = await Task.findById(taskId);
        if (!task) {
            return res.status(404).json({ error: 'Task not found' });
        }
        
        // Check if project exists
        const project = await Project.findById(task.project);
        if (!project) {
            return res.status(404).json({ error: 'Project not found' });
        }
        
        // Check permissions
        if (req.user.role === 'Developer') {
            // Must be the assignee
            if (task.assignee && task.assignee.toString() !== req.user._id.toString()) {
                return res.status(403).json({ error: 'You can only update tasks assigned to you' });
            }
        } else if (req.user.role === 'Project Manager') {
            // Project Manager must be a PM for this project
            const isPMMember = project.members.some(member => 
                member.userId.toString() === req.user._id.toString() && 
                member.role === 'Project Manager'
            );
            
            if (!isPMMember) {
                return res.status(403).json({ error: 'You must be a Project Manager of this project to update tasks' });
            }
        } else if (req.user.role !== 'Admin') {
            return res.status(403).json({ error: 'Access denied' });
        }
        
        // Update status
        task.status = status;
        task.updatedAt = Date.now();
        await task.save();
        
        // Populate references
        const populatedTask = await Task.findById(task._id)
            .populate('assignee', 'username team level role')
            .populate('assignedBy', 'username');
            
        res.json(populatedTask);
    } catch (error) {
        res.status(400).json({ error: error.message });
    }
});
```

### 2. Enhanced User Management with Team Organization

To implement the drag-and-drop user management system:

1. Update the UserList component to include drag-and-drop team organization:

```javascript
import React, { useState, useEffect } from 'react';
import axios from 'axios';
// ... other imports
import { DragDropContext, Droppable, Draggable } from '@hello-pangea/dnd';
import API_CONFIG from '../config';

const UserList = () => {
    // State variables
    const [users, setUsers] = useState([]);
    const [groupedUsers, setGroupedUsers] = useState({});
    const [displayMode, setDisplayMode] = useState('list'); // 'list' or 'teams'
    // Other state variables...

    useEffect(() => {
        // Group users by team when users or displayMode changes
        if (displayMode === 'teams') {
            const grouped = users.reduce((acc, user) => {
                const team = user.team || 'Unassigned';
                if (!acc[team]) {
                    acc[team] = [];
                }
                acc[team].push(user);
                return acc;
            }, {});
            setGroupedUsers(grouped);
        }
    }, [users, displayMode]);

    // Handle role-specific form behavior
    const handleRoleChange = (e) => {
        const selectedRole = e.target.value;
        
        if (selectedRole === 'Admin' || selectedRole === 'Project Manager') {
            setFormData({
                ...formData,
                role: selectedRole,
                team: selectedRole === 'Admin' ? 'admin' : 'pm',
                level: selectedRole === 'Admin' ? 'admin' : 'pm'
            });
        } else {
            setFormData({
                ...formData,
                role: selectedRole
            });
        }
    };

    // Handle drag end event
    const handleDragEnd = (result) => {
        const { destination, source, draggableId } = result;
        
        // If there's no destination or the item is dropped in the same place
        if (!destination || 
            (destination.droppableId === source.droppableId && 
             destination.index === source.index)) {
            return;
        }
        
        if (displayMode === 'list') {
            // Reordering in the list view
            const newUsers = Array.from(users);
            const [movedUser] = newUsers.splice(source.index, 1);
            newUsers.splice(destination.index, 0, movedUser);
            setUsers(newUsers);
        } else {
            // Moving between teams in team view
            const userId = draggableId;
            const user = users.find(u => u._id === userId);
            const newTeam = destination.droppableId === 'Unassigned' ? 'None' : destination.droppableId;
            
            // Only update if the team has changed
            if (user && user.team !== newTeam) {
                updateUserTeam(userId, newTeam);
            }
        }
    };

    // Update user's team in the database
    const updateUserTeam = async (userId, newTeam) => {
        try {
            const token = localStorage.getItem('token');
            const user = users.find(u => u._id === userId);
            
            await axios.put(
                `${API_CONFIG.BASE_URL}${API_CONFIG.USERS_ENDPOINT}/${userId}`, 
                { ...user, team: newTeam },
                { headers: { Authorization: `Bearer ${token}` } }
            );
            
            // Update local state
            setUsers(users.map(u => 
                u._id === userId ? { ...u, team: newTeam } : u
            ));
        } catch (error) {
            console.error('Error updating user team:', error);
        }
    };

    // Render team cards for the team view
    const renderTeamCards = () => {
        // Get all possible teams including ones without users
        const allTeams = [
            'Design', 'Database', 'Backend', 'Frontend', 
            'DevOps', 'Tester/Security', 'admin', 'pm', 'None'
        ];
        
        return (
            <DragDropContext onDragEnd={handleDragEnd}>
                <Row>
                    {allTeams.map(team => {
                        const teamName = team === 'None' ? 'Unassigned' : team;
                        const teamUsers = groupedUsers[team] || [];
                        
                        return (
                            <Col md={4} key={team} className="mb-4">
                                <Card className="h-100 shadow-sm">
                                    <Card.Header className="d-flex justify-content-between align-items-center">
                                        <h5 className="mb-0">
                                            <Badge bg={getTeamBadgeColor(team)} className="me-2">
                                                {teamName}
                                            </Badge>
                                            <small>{teamUsers.length} members</small>
                                        </h5>
                                    </Card.Header>
                                    <Droppable droppableId={team}>
                                        {(provided) => (
                                            <div
                                                ref={provided.innerRef}
                                                {...provided.droppableProps}
                                                className="p-2"
                                                style={{ minHeight: '150px' }}
                                            >
                                                {teamUsers.map((user, index) => (
                                                    <Draggable 
                                                        key={user._id} 
                                                        draggableId={user._id} 
                                                        index={index}
                                                    >
                                                        {(provided) => (
                                                            <Card
                                                                ref={provided.innerRef}
                                                                {...provided.draggableProps}
                                                                {...provided.dragHandleProps}
                                                                className="mb-2 p-2 border"
                                                            >
                                                                {/* User card content */}
                                                            </Card>
                                                        )}
                                                    </Draggable>
                                                ))}
                                                {provided.placeholder}
                                            </div>
                                        )}
                                    </Droppable>
                                </Card>
                            </Col>
                        );
                    })}
                </Row>
            </DragDropContext>
        );
    };

    // Render view toggle and content
    return (
        <Container fluid className="p-4">
            <Card className="shadow-sm mb-4">
                <Card.Body>
                    <Row className="align-items-center mb-3">
                        <Col md={6}>
                            <h2 className="mb-0">User Management</h2>
                        </Col>
                        <Col md={3} className="text-md-end mb-2 mb-md-0">
                            <Button 
                                variant={displayMode === 'list' ? "contained" : "outlined"}
                                className="me-2"
                                onClick={() => setDisplayMode('list')}
                            >
                                List View
                            </Button>
                            <Button 
                                variant={displayMode === 'teams' ? "contained" : "outlined"}
                                onClick={() => setDisplayMode('teams')}
                            >
                                Team View
                            </Button>
                        </Col>
                        <Col md={3} className="text-md-end">
                            <Button 
                                variant="contained" 
                                color="primary" 
                                onClick={() => handleOpen()}
                            >
                                Add User
                            </Button>
                        </Col>
                    </Row>
                    
                    {displayMode === 'list' ? renderListView() : renderTeamCards()}
                </Card.Body>
            </Card>

            {/* User dialog */}
        </Container>
    );
};

export default UserList;
```

### 3. GitHub Updates and Branch Management

To properly maintain your code in GitHub, follow these steps:

1. Create a new branch for your feature development:
   ```bash
   git checkout -b feature/drag-drop-functionality
   ```

2. Add your changes:
   ```bash
   git add .
   ```

3. Commit with a descriptive message:
   ```bash
   git commit -m "Add drag and drop functionality for tasks and user management"
   ```

4. Push to GitHub:
   ```bash
   git push origin feature/drag-drop-functionality
   ```

5. Create a pull request in GitHub to merge your changes to the main branch

6. After review, merge the changes to complete the feature addition 